{"pages":[{"title":"Tags","date":"2018-03-16T08:34:04.286Z","path":"tags/index.html","text":""},{"title":"关于Apple Juice","date":"2018-03-19T09:54:07.238Z","path":"about/index.html","text":"由于开发目的就是能在IOS上运行，所以起名叫苹果汁。"},{"title":"Categories","date":"2018-03-16T08:34:04.285Z","path":"categories/index.html","text":""},{"title":"testpage","date":"2018-03-15T11:33:51.000Z","path":"testpage/index.html","text":""}],"posts":[{"title":"创建Unity工程","date":"2018-03-19T11:22:58.000Z","path":"1-1-5-insert-2018-03-19/","text":"","tags":[],"categories":[{"name":"开始使用","slug":"开始使用","permalink":"https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/开始使用/"}]},{"title":"导入Unity插件","date":"2018-03-19T11:22:04.000Z","path":"1-2-0-createunityproject-2018-03-19/","text":"","tags":[],"categories":[{"name":"开始使用","slug":"开始使用","permalink":"https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/开始使用/"}]},{"title":"概述","date":"2018-03-19T11:21:45.000Z","path":"1-1-0-overview-2018-03-19/","text":"","tags":[],"categories":[{"name":"开始使用","slug":"开始使用","permalink":"https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/开始使用/"}]},{"title":"欢迎","date":"2018-03-16T10:41:21.000Z","path":"index-2018-03-16/","text":"欢迎使用 Apple Juice这是一个纯 .net2.0实现的ActionScript3 编译器和虚拟机。 支持除了 namespace 和 with 和 E4X XML操作外的一切actionscript3语法特性。 可以将actionscript3代码编译为字节码，然后加载并动态执行。VM由纯C# 2.0代码实现，可以直接让Unity来读取并执行生成的字节码，就是可用Unity完成热更新操作。编译器部分实现了完整的编译期类型检查。并且有完整的错误提示。已经和FlashDevelop完成了集成，可以直接在FlashDevelop中开发并一键编译发布到Unity。Unity的API或者自己开发的C# API提供了工具直接转换为actionscript api文件和对接代码，并且直接注册到FlashDevelop工程中。 特色 对.net的结构体有特殊优化。在脚本中只要在方法的局部变量中使用，可以任意的new而不会导致gc.因此使用UnityEngine.Vector3之类类型时，可以放心使用。 对导出的类型有特殊优化。只要在方法的局部变量中使用，则脚本本身不产生额外的对象分配。 实现操作符重载。导出的对象如果有操作符重载，则在脚本中同样可以使用。如下代码是完全合法的。 1cube.transform.localPosition += v * Time.deltaTime; 可以使用yield语句返回一个IEnumerator,然后用Iterator包装为.net的IEnumerator接口。所以可以直接在脚本中写Unity的协程。如如下代码所示: 12345678910111213141516171819var mono:MonoBehaviour = GameObject.find(\"AS3Player\").getComponent(MonoBehaviour) as MonoBehaviour;trace(mono.name);mono.startCoroutine( Iterator( ( function() &#123; trace(\"a\",Time.frameCount); yield return 1; trace(\"b\",Time.frameCount); yield return 2; trace(\"c\",Time.frameCount); yield return 3; &#125; )())); 自动将.net 委托对应到ActionScript3的function对象。例如: 1234567891011var btn:Button = Button( GameObject.find(\"Button\").getComponent(Button)); btn.onClick.addListener( onclick );btn.onClick.addListener( function() &#123; trace(\"hahaha\",this); &#125;); 自动处理.net 类库中的 out ref类型的参数。这样的方法也可自动导出。例如 long.TryParse: 12345678910/*** System.Int64.TryParse*parameters:* s : System.String* result : (Out)System.Int64*return:* System.Boolean*/[native,static_system_Int64_tryParse];public static function tryParse(s:String,result:Int64,refout:as3runtime.RefOutStore):Boolean; 完整的编译期类型检查。脚本有完整的编译时类型检查，利于错误排查。 完全实现的面向对象支持。完整支持类继承和接口。 FlashDevelop IDE支持。可以完全利用IDE的智能提示，编译错误也可在IDE中得到反馈。可在IDE中直接编译热更新代码成到Unity项目 api全自动导出 自动将.net类库导出给脚本使用。并且保留有原始类型信息。例如UnityEngine.Avatar导出后的api形式为:12345678910111213141516171819202122232425262728293031323334353637package unityengine &#123; /** * Sealed * UnityEngine.Avatar */ [no_constructor] [link_system] public final class Avatar extends UObject &#123; [creator]; [native,unityengine_Avatar_creator]; private static function _creator(type:Class):*; [native,$$_noctorclass]; public function Avatar(); //*********公共方法******* /** * UnityEngine.Avatar.get_isValid *return: * System.Boolean */ [native,unityengine_Avatar_get_isValid] public final function get isValid():Boolean; /** * UnityEngine.Avatar.get_isHuman *return: * System.Boolean */ [native,unityengine_Avatar_get_isHuman] public final function get isHuman():Boolean; &#125; &#125; IDE能提供智能感知提示。 自动导出的API为actionscript3风格。比如UnityEngine.UI.Button 将被导出为 unityengine.ui.Button 能将.net 类库中的类型包含继承关系和接口实现关系的导出。例如，UnityEngine.MeshRenderer 继承自 UnityEngine.Renderer 。那么导出后的as3类型也会保持以上的关系。","tags":[],"categories":[]}]}